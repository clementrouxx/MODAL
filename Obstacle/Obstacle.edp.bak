real L=0.625, ell=1, h=1, eps =	0.1, d = 4; //parametres de la geometrie
int m=30; //nombre de mailles par element de longueur
int maxSteps = 30; // Nombre maximal d'étapes dans la boucle
real mu = 1e-4;

real [int] tau(2);
real [int] tauPrec(2);// tau au tour précédent
tau(0) = -2.58148e-05;
tau(1) = -0.767446;

func real sqrdist(real [int] tau1, real [int] tau2){ // Distance euclidienne au carré dans R2
	return ((tau1(0)-tau2(0))^2 + (tau1(1)-tau2(1))^2);
}

border a(t=-d,d){x =t; y = -2; label = 1;} // BAS
border b(t=0,2){x =d; y = -2+t; label = 2;} //DROIT : 2
border haut(t=-d,d){x =-t; y = 0; label = 1;} // HAUT
border i(t=0,2){x =-d; y = -t; label = 4;} //GAUCHE : 4

/*
func real h0(real t){
	return sin(3.2*pi*(-t));
}*/
func real h0(real t){
	return cos(3.2*pi*t) - 1;
}
func real h1(real t){
	return -(2/pi)*sin(1.6*pi*(-t));
}
func real h2(real t){
	return (2/pi)*(cos(1.6*pi*(-t))+1);
}

ofstream Rfile("R.txt");
Rfile.precision(15);


border pertHaut(t=-L,L){x =-t; y = -1+eps*(h0(t)+tau(0)*h1(t)+tau(1)*h2(t)); label = 3;}
border pertBas(t=L,-L){x =-t; y = -1-eps*(h0(t)+tau(0)*h1(t)+tau(1)*h2(t)); label = 3;}

// border Cercle(t=0,2*pi){ x=0.3*cos(t); y=0.5+0.3*sin(t); label = 1;}
//plot(a(2*d*m)+b(m)+hd(m*(d-L))+hg(m*(d-L))+pert(int(2*L)*m)+i(m), wait = true);
mesh Th=buildmesh(a(2*d*m)+b(2*m)+haut(m*d)+i(2*m)+pertHaut(-3*L*m)+pertBas(-3*L*m));
//plot(Th,wait=1,cmm="Appuyer sur Enter pour poursuivre");

fespace Vh(Th,P2); // espace elements finis (ici fonctions continues P2 sur chaque triangle)s
real w=0.8*pi; // frequence de travail
func  uifonc=exp(1i*w*x);
func  uifoncConj=exp(-1i*w*x);

//DEBUT DE LA PARTIE A NE PAS MODIFIER
/*****************************************
Construction des Dirichlet-to-Neumann
******************************************/
int nbfpro = 15; //troncature dans le Dirichlet-to-Neumann
//fonction de la base de fourier
func complex expin(real x1,real x2, int n)
{
	if (n==0)
	return 1/sqrt(2.);
	else
	return (cos(n*pi*x2/2));	
}
/******************************************************
Dirichlet-to-Neumann à gauche
/*****************************************************/
complex[int,int] vDtNG( Vh.ndof, nbfpro);
matrix<complex> DtNG;
for (int n=0;n<nbfpro;n++)
{
	func f= expin(x,y,n);
	varf FiniFourier(u,v) = int1d(Th,4)(v*f); // integration sur le bord gauche
	complex[int] temp = FiniFourier(0,Vh);
	vDtNG(:,n)=temp;
}
DtNG=vDtNG;
// Construction de la matrice diagonale pour construire les EFL
matrix<complex> DG;
complex[int] diagofDG(nbfpro);
for (int n =0;n<nbfpro;n++)
{
	if (n==0)
	diagofDG[n] = -1i*w; // moins car dans la formu. varia., il y a un moins
	else
	diagofDG[n] = sqrt((n*pi)^2-w^2); // moins car dans la formu. varia., il y a un moins
}
DG = [diagofDG];
// Assemblage final et réorganisation pour intégration dans la formulation variationnelle
matrix<complex> EFLG ;
EFLG = DtNG*DG;
EFLG= EFLG*DtNG';

/******************************************************
Dirichlet-to-Neumann à droite
/*****************************************************/
complex[int,int] vDtND( Vh.ndof, nbfpro);
matrix<complex> DtND;
for (int n=0;n<nbfpro;n++)
{
	func f= expin(x,y,n);
	varf FiniFourier(u,v) = int1d(Th,2)(v*f); // integration sur le bord droit
	complex[int] temp = FiniFourier(0,Vh);
	vDtND(:,n)=temp;
}
DtND=vDtND;
matrix<complex> DD;
complex[int] diagofDD(nbfpro);
for (int n =0;n<nbfpro;n++)
{
	if (n==0)
	diagofDD[n] = -1i*w; 
	else
	diagofDD[n] = sqrt((n*pi)^2-w^2); 
}
DD = [diagofDD];
matrix<complex> EFLD ;
EFLD = DtND*DD;
EFLD= EFLD*DtND';
// FIN DE LA PARTIE A NE PAS MODIFIER

/***************************************
On passe à la formulation variationnelle
****************************************/
Vh<complex> u,v,ui=uifonc;
matrix<complex> A,B,C;
complex[int] G(Vh.ndof);
cout << "ndof " << Vh.ndof << endl;
varf aForme(u,v) = int2d(Th)(dx(u)*dx(v)+dy(u)*dy(v))-int2d(Th)(w^2*u*v);
varf gForme(u,v) =  int1d(Th,4)(-2*1i*w*uifonc*v);
A= aForme(Vh,Vh);
C= A+EFLG+EFLD; //on rajoute les Dirichlet-to-Neumann
set(C,solver=UMFPACK);
G= gForme(0,Vh);
u[]=C^-1*G;
complex R = int1d(Th,4)((u-uifonc)*uifonc)/2;
complex T = int1d(Th,2)(u*uifoncConj)/2;
cout << "*************** R = " << R << " T = " << T << endl;
cout << "Conservation de l'energie : " << abs(R)^2 + abs(T)^2 << endl;
Rfile << R << endl;
Vh uReel=real(u);
Vh uImag=imag(u);
plot(uReel,fill=1,dim=2,nbiso=40,value=1,wait=0,cmm="Re u, |R| = "+abs(R)+", T = "+T+", Phase de T : "+atan(imag(T)/real(T)));



/***************************************
Affichage de la solution en régime harmonique en temps
****************************************/

/*
real T=2*pi/w; //periode
int nbIter=200;
Vh uTemp;
Vh uAbs=abs(u); //module
real[int] viso(40); //5 lignes pour fixer l'echelle 
real ValMin=-uAbs[].max;
real ValMax=uAbs[].max;
for (int i=0;i<viso.n;i++)
{viso[i]=ValMin+(ValMax-ValMin)*i/(viso.n-1);}
for(real t=0;t<3*T;t+=3*T/nbIter)
{uTemp=uReel*cos(w*t)+uImag*sin(w*t);
plot(uTemp,fill=1,dim=2,viso=viso(0:viso.n-1),value=1,wait=0,cmm="Re (u(x,y)exp(-iwt))");}
*/
/***************************************
Portion de code pour ecrire dans un fichier
****************************************/
complex [int] MesValeurs(3);
ofstream f1("MonFichier.txt");
int nold=f1.precision(15); // pour regler la precision
for (int i=0;i<=1;i++)	
{f1 << MesValeurs(i) << endl;};


